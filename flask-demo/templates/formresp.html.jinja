{% extends 'form.html.jinja' %}

{% block results %}
    <script type="text/javascript" src="{{ url_for('static', filename='../js/mrs.js') }}" charset="utf-8"></script>      
    <link rel="stylesheet" type="text/css" media="screen" href="{{ url_for('static', filename='../css/style.css') }}">    
    <div id="result"><br>
        <button id="sparql">Hide SPARQL</button>
        <div id="sparql-div" style="display: block;">
            {{ sparql }}
        </div><br><br>
        {# <div id="mrs-results">
            {{query_result}}
        </div> #}
        {% if n_pages == 0%}
        <strong style="text-align: center">No matches were found.</strong><br>
        {% else %}
        <strong style="text-align: center">{{quantMatches[0]}} matches in {{quantMatches[1]}} profile results.</strong><br>
        <strong>Showing page {{page}} of {{n_pages}}</strong> 
        <div style="float:right">
        {% if page != 1 %}
            <a href="../query?query={{wql_query}}&p={{page-1}}" class="nextPage">&laquo;</a> 
        {% endif %}
        {% if page != n_pages %}
            <a href="../query?query={{wql_query}}&p={{page+1}}" class="nextPage">&raquo;</a>   
        {% endif %}
        </div>
        <div id="mrsViz-results"></div>
        <div style="float:right">
        {% if page != 1 %}
            <a href="../query?query={{wql_query}}&p={{page-1}}" class="nextPage">&laquo;</a> 
        {% endif %}
        {% if page != n_pages %}
            <a href="../query?query={{wql_query}}&p={{page+1}}" class="nextPage">&raquo;</a>   
        {% endif %}
        </div>
    </div>

    <script type="text/javascript">
        var button = document.getElementById('sparql');
        var sparqlDiv = button.nextElementSibling;
        button.addEventListener("click", () => {
            if (sparqlDiv.style.display === "block") {
                sparqlDiv.style.display = "none";
                button.innerHTML = "Show SPARQL";
            } else {
                sparqlDiv.style.display = "block";
                button.innerHTML = "Hide SPARQL";
            }
        });
        var sparqlQuery = sparqlDiv.nextElementSibling.innerText;
        var queryBase = "SELECT ?s ?p ?o where {?s ?p ?o}"
        var matchesPage = {{matchesPage}};
        var vizCont = document.getElementById("mrsViz-results");
        for (var key in matchesPage) {
            var divViz = document.createElement('div');
            vizCont.appendChild(divViz);
            divViz.className = "mrsViz";
            divViz.innerHTML = `<hr><strong>${key}.</strong> `;
            var texto = document.createElement('text');
            texto.textContent = matchesPage[key]['text'];
            texto.id = key;
            divViz.appendChild(texto);
            divViz.innerHTML = divViz.innerHTML.concat("<br><br>");
            divMatch = document.createElement('div');
            divMatch.innerHTML = `Showing match 1 of ${matchesPage[key]['matches'].length}`;
            divViz.appendChild(divMatch);
            MRS(divViz, key, JSON.parse(matchesPage[key]['mrs']));
            
            // Normalizing predicates:
            // The matches is an array of arrays. Those internal arrays are of the form 
            // [predicate_label, variables to highlight in that ep, predicate_label, variables to highlight in that ep, ...]
            // We need to normalize the predicate label to make a search inside the svg text tags of the MRS
            var predPat = /"(.+)<(\d+),(\d+)>"/; 
            var varPat = /variable-(.+)/;

            var normalizedMatches = matchesPage[key]['matches'].map((xs) => {
                var matchObj = {};
                var key = "teste";
                xs.forEach((x) => {
                    if (x.match(predPat)) {
                        key = `${x.match(predPat)[1]}⟨${x.match(predPat)[2]}:${x.match(predPat)[3]}⟩`;
                        matchObj[key] = [];
                    } else {
                        if (x.match(varPat)) {
                            matchObj[key] = matchObj[key].concat(x.match(varPat)[1]);
                        } else { // CARG case
                            matchObj[key] = matchObj[key].concat(x); //review
                        }
                    }
                });
                return matchObj;
            });

            // Now, we search for the EP svg group that contains this predicate in this MRS
            var MRSsvg= divViz.getElementsByTagName("svg")[0]
            var texts = MRSsvg.getElementsByTagName("text")
            for (var pred in normalizedMatches[0]) {
                for (var text of texts) {
                    if (text.textContent === pred) {
                        var EPgroup = text.parentNode;
                        text.style.fill = "blue";
                        break;
                    }
                }
                for (var varToHighlight of normalizedMatches[0][pred]) {
                    var varTag = EPgroup.querySelector(`[title='${varToHighlight}']`);
                    varTag.style.fill = "blue";
                }
            }
        }
    </script>
    {% endif %}
{% endblock %}

