{% extends 'form.html.jinja' %}

{% block results %}
    <script type="text/javascript" src="{{ url_for('static', filename='../js/mrs.js') }}" charset="utf-8"></script>      
    <link rel="stylesheet" type="text/css" media="screen" href="{{ url_for('static', filename='../css/style.css') }}">    
    <div id="result"><br>
        <button id="sparql">Hide SPARQL</button>
        <div id="sparql-div" style="display: block;">
            {{ sparql }}
        </div><br><br>
        {# <div id="mrs-results">
            {{query_result}}
        </div> #}
        {% if n_pages == 0%}
        <strong style="text-align: center">No matches were found.</strong><br>
        {% else %}
        <strong style="text-align: center">{{quantMatches[0]}} matches in {{quantMatches[1]}} profile results.</strong><br>
        <strong>Showing page {{page}} of {{n_pages}}</strong> 
        <div style="float:right">
        {% if page != 1 %}
            <a href="../query?query={{wql_query}}&p={{page-1}}" class="nextPage">&laquo;</a> 
        {% endif %}
        {% if page != n_pages %}
            <a href="../query?query={{wql_query}}&p={{page+1}}" class="nextPage">&raquo;</a>   
        {% endif %}
        </div>
        <div id="mrsViz-results"></div>
        <div style="float:right">
        {% if page != 1 %}
            <a href="../query?query={{wql_query}}&p={{page-1}}" class="nextPage">&laquo;</a> 
        {% endif %}
        {% if page != n_pages %}
            <a href="../query?query={{wql_query}}&p={{page+1}}" class="nextPage">&raquo;</a>   
        {% endif %}
        </div>
    </div>

    <script type="text/javascript">
        var button = document.getElementById('sparql');
        var sparqlDiv = button.nextElementSibling;
        button.addEventListener("click", () => {
            if (sparqlDiv.style.display === "block") {
                sparqlDiv.style.display = "none";
                button.innerHTML = "Show SPARQL";
            } else {
                sparqlDiv.style.display = "block";
                button.innerHTML = "Hide SPARQL";
            }
        });
        var sparqlQuery = sparqlDiv.nextElementSibling.innerText;
        var queryBase = "SELECT ?s ?p ?o where {?s ?p ?o}"
        var matchesPage = {{matchesPage}};
        var vizCont = document.getElementById("mrsViz-results");
        // Normalizing predicates and matches:
        // The matches is an array of arrays. Those internal arrays are of the form 
        // [predicate_label, variables to highlight in that ep, predicate_label, variables to highlight in that ep, ...]
        // We need to normalize the predicate label to make a search inside the svg text tags of the MRS
        var predPat = /"(.+)<(\d+),(\d+)>"/; 
        var varPat = /variable-(.+)/;
        var predKey = "";
        for (var key in matchesPage) {
            matchesPage[key]['matches'] = matchesPage[key]['matches'].map(xs => {
                var matchObj = {};  
                for (var x of xs) {
                    if (x.match(predPat)) {
                        predKey = `${x.match(predPat)[1]}⟨${x.match(predPat)[2]}:${x.match(predPat)[3]}⟩`;
                        if (!(predKey in matchObj)) { // the else is the repetition case of issue 19
                            matchObj[predKey] = [];
                        }
                    } else {
                        if (x.match(varPat)) {
                            matchObj[predKey].push(x.match(varPat)[1]);
                        } else { //CARG case
                            matchObj[predKey].push(x);
                        } 
                    }
                }
                return matchObj;
            });
        }


        for (var key in matchesPage) {
            var divViz = document.createElement('div');
            var texto = document.createElement('text');
            var but1 = document.createElement('button');
            var but2 = document.createElement('button');
            var divMatch = document.createElement('span');
            vizCont.appendChild(divViz);
            divViz.className = "mrsViz";
            divViz.innerHTML = `<hr><strong>${key}.</strong> `;
            divViz.dataset.item = key;
            texto.textContent = matchesPage[key]['text'];
            texto.id = key;
            divViz.appendChild(texto);
            divViz.innerHTML = divViz.innerHTML.concat("<br><br>");
            but1.className = "prevMatch"
            but2.className = "nextMatch"
            but1.textContent = "<";
            but1.style.visibility = "hidden";
            divMatch.dataset.match = "1";
            divMatch.dataset.matchMax = matchesPage[key]['matches'].length;
            divMatch.textContent = `Match 1 of ${matchesPage[key]['matches'].length}`;
            but2.textContent = ">";
            if (matchesPage[key]['matches'].length !== 1) {
                but2.style.visibility = "visible";
            } else {
                but2.style.visibility = "hidden";
            }
            var matchPos = 1;
            divViz.appendChild(but1);
            divViz.appendChild(divMatch);
            divViz.appendChild(but2);
            divViz.appendChild(document.createElement('br'));
            MRS(divViz, key, JSON.parse(matchesPage[key]['mrs']));
            var MRSsvg= divViz.getElementsByTagName("svg")[0];
            elementsToHighlight(matchesPage[key]['matches'][0], MRSsvg).forEach(x => {
                x.style.fill = "blue";
            });
            but1.addEventListener("click", function (e) {
                // manipulation of elements to hide button when not needed.
                var match = Number(this.nextElementSibling.dataset.match);
                var matchMax = Number(this.nextElementSibling.dataset.matchMax);
                this.nextElementSibling.dataset.match = match - 1;
                this.nextElementSibling.textContent = `Match ${match - 1} of ${matchMax}`;
                if (match - 1 === 1) {
                    this.style.visibility = "hidden";
                } else if (match === matchMax) {
                    this.nextElementSibling.nextElementSibling.style.visibility = "visible";
                }
                // changing the highlight:
                MRSsvg= this.parentElement.querySelector('svg');
                var itemChange = this.parentElement.dataset.item;
                elementsToHighlight(matchesPage[itemChange]['matches'][match-1], MRSsvg).forEach(x => {
                    x.style.fill = "black";
                });
                elementsToHighlight(matchesPage[itemChange]['matches'][match-2], MRSsvg).forEach(x => {
                    x.style.fill = "blue";
                });
            });
            but2.addEventListener("click", function (e) {
                var match = Number(this.previousElementSibling.dataset.match);
                var matchMax = Number(this.previousElementSibling.dataset.matchMax);
                this.previousElementSibling.dataset.match = match + 1;
                this.previousElementSibling.textContent = `Match ${match + 1} of ${matchMax}`;
                if (match + 1 === matchMax) {
                    this.style.visibility = "hidden";
                } else if (match + 1 === 2) {
                    this.previousElementSibling.previousElementSibling.style.visibility = "visible";
                }
                MRSsvg= this.parentElement.querySelector('svg');
                var itemChange = this.parentElement.dataset.item;
                elementsToHighlight(matchesPage[itemChange]['matches'][match-1], MRSsvg).forEach(x => {
                    x.style.fill = "black";
                });
                elementsToHighlight(matchesPage[itemChange]['matches'][match], MRSsvg).forEach(x => {
                    x.style.fill = "blue";
                });
            });
        }

        function elementsToHighlight(normalizedMatch, MRSElement) {
            var texts = MRSElement.getElementsByTagName("text");
            var listElements = [];
            for (var pred in normalizedMatch) {
                for (var text of texts) {
                    // Search for the EP with the predicate:
                    if (text.textContent === pred) {
                        var EPgroup = text.parentNode;
                        listElements.push(text);
                        break;
                    }
                } // In this EP, finding the variables to highlight:
                for (var varToHighlight of normalizedMatch[pred]) {
                    var varTag = EPgroup.querySelector(`[title='${varToHighlight}']`);
                    listElements.push(varTag);
                }
            }
            return listElements;
        }
    </script>
    {% endif %}
{% endblock %}

